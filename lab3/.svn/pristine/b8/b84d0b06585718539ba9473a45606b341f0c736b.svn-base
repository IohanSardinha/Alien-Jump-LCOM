#include <lcom/lcf.h>

#include <lcom/lab3.h>

#include <stdbool.h>
#include <stdint.h>

#include "keyboard.h"
#include "timer.h"
#include "i8042.h"

extern uint8_t data;
extern int sys_inb_count;
extern uint32_t timer_count;
extern bool new_scancode;

int main(int argc, char *argv[]) {
  // sets the language of LCF messages (can be either EN-US or PT-PT)
  lcf_set_language("EN-US");

  // enables to log function inprintfvocations that are being "wrapped" by LCF
  // [comment this out if you don't want/need it]
  lcf_trace_calls("/home/lcom/labs/lab3/trace.txt");

  // enables to save the output of printf function calls on a file
  // [comment this out if you don't want/need it]
  lcf_log_output("/home/lcom/labs/lab3/output.txt");

  // handles control over to LCF
  // [LCF handles command line arguments and invokes the right function]
  if (lcf_start(argc, argv))
    return 1;

  // LCF clean up tasks
  // [must be the last statement before return]
  lcf_cleanup();

  return 0;
}

int(kbd_test_scan)() {

  int ret;
  message msg;
  int ipc_status;
  unsigned long r;
  int irq_set;
 
  keyboard_subscribe_int(&irq_set);

  while(data != ESCKEY) 
  { 
     /* Get a request message. */
     if ( (r = driver_receive(ANY, &msg, &ipc_status)) != 0 ) 
     { 
         printf("driver_receive failed with: %d", r);
        continue;
     }

    if (is_ipc_notify(ipc_status)) { /* received notification */
        switch (_ENDPOINT_P(msg.m_source)) 
        {
            case HARDWARE: /* hardware interrupt notification */
                if (msg.m_notify.interrupts & irq_set) { /* subscribed interrupt */
                    keyboard_IH();
                    ret = print_scancode();
                }
                break;
            default:
                break; /* no other notifications expected: do nothing */ 
        }
    } 
    else 
    { /* received a standard message, not a notification */
        /* no standard messages expected: do nothing */
    }
  }

  ret = ret || kbd_print_no_sysinb(sys_inb_count); // Number of sys_inb() function calls

  keyboard_unsubscribe_int();

  return ret;
}

int(kbd_test_poll)() {
  
  int ret;

  while(data != ESCKEY)
  {
    keyboard_IH();
    if(new_scancode)
      ret = print_scancode();
  }

  ret = ret || keyboard_enable_interupts();

  ret = ret || kbd_print_no_sysinb(sys_inb_count);
  
  return ret;
}

int(kbd_test_timed_scan)(uint8_t n) {
  int ret;
  message msg;
  int ipc_status;
  unsigned long r;
  int irq_set_kbd;
  uint8_t irq_set_timer;
 
  keyboard_subscribe_int(&irq_set_kbd);
  timer_subscribe_int(&irq_set_timer);

  while(data != ESCKEY && timer_count/60 < n) 
  { 
     /* Get a request message. */
     if ( (r = driver_receive(ANY, &msg, &ipc_status)) != 0 ) 
     { 
         printf("driver_receive failed with: %d", r);
        continue;
     }

    if (is_ipc_notify(ipc_status)) { /* received notification */
        switch (_ENDPOINT_P(msg.m_source)) 
        {
            case HARDWARE: /* hardware interrupt notification */
                if (msg.m_notify.interrupts & irq_set_kbd) { /* subscribed interrupt */
                    keyboard_IH();
                    ret = print_scancode();
                    timer_count = 0;
                }
                else if (msg.m_notify.interrupts & irq_set_timer) { /* subscribed interrupt */
                    timer_int_handler(); // adds 1 to counter
                }
                break;
            default:
                break; /* no other notifications expected: do nothing */ 
        }
    } 
    else 
    { /* received a standard message, not a notification */
        /* no standard messages expected: do nothing */
    }
  }

  ret = ret || kbd_print_no_sysinb(sys_inb_count); // Number of sys_inb() function calls

  keyboard_unsubscribe_int();
  timer_unsubscribe_int();

  return ret;
  return 1;
}
